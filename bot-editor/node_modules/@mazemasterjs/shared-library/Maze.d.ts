import { MazeBase } from './MazeBase';
export declare class Maze extends MazeBase {
    /**
     * Instantiates or new or pre-loaded Maze object
     * @param data - JSON Object containing stubbed maze data
     */
    constructor(data?: any);
    /**
     * Generates a new maze based on the given parameters
     * @param height - number: The height of the maze grid
     * @param width - number: The width of the maze grid
     * @param challengeLevel - number: The difficulty level (1 to 10) of the maze being generated
     * @param name - string: the name of the maze
     * @param seed - string: pseudo random number generator seed value.  If empty, maze will be random and unrepeatable
     */
    generate(height: number, width: number, challengeLevel: number, name: string, seed: string): this;
    /**
     * Wraps the recursive tagSolution function
     * and initializes tracking variables
     */
    solveAndTag(): void;
    /**
     * Carves passages out of a new maze grid that has no exits set
     * Only trace logging in here due to recursive log spam
     * @param cell
     */
    private carvePassage;
    /**
     * Solves the maze and tags the solution path TAGS.PATH.
     * Only using trace logging in here because it's recursive and very noisy...
     *
     * @param cellPos
     * @param pathId
     */
    private tagSolution;
    private hasTrap;
    /**
     * Adds traps to the maze. Trap frequency and positioning changes based on maze challenge level.
     */
    private addTraps;
    /**
     * Validates generation parameters. Throws error on failure, sets class properties on success.
     *
     * @param height
     * @param width
     * @param challengeLevel
     * @param name
     * @param seed
     */
    private validateAndSetGenParams;
    /**
     * Generates a string of maze stats for debug/trace logging
     */
    private getMazeStatsString;
}
export default Maze;
