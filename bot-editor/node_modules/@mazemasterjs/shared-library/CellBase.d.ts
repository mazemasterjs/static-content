import { DIRS } from './Enums';
import { MazeLoc } from './MazeLoc';
import { ObjectBase } from './ObjectBase';
export declare class CellBase extends ObjectBase {
    protected pos: MazeLoc;
    protected exits: number;
    protected tags: number;
    protected traps: number;
    protected visits: number;
    protected lastVisit: number;
    protected notes: string[];
    constructor(jsonData?: any);
    loadData(jsonData: any): void;
    /**
     * Returns the string array containing player-written notes
     */
    readonly Notes: Array<string>;
    /**
     * Add a string to the CellBase.notes array
     */
    addNote(note: string): void;
    /**
     * Returns the bitwise exits value for the current cell
     */
    readonly Exits: number;
    /**
     * Returns a string listing all available exit directions
     */
    listExits(): string;
    /**
     * Returns an array representing the cells grid coordinates (row, col)
     */
    /**
    * Set the cell's grid coordinates
    * @param x
    * @param y
    */
    Location: MazeLoc;
    /**
     * Returns a bitwise integer value representing cell tags
     */
    readonly Tags: number;
    /**
     * Returns the bitwise integer value representing cell traps
     */
    readonly Traps: number;
    /**
     * Returns list of string values representing cell tags
     */
    listTags(): string;
    /**
     *  Increment the cell's visits counter by one and update lastVisit moveNumber
     */
    addVisit(moveNumber: number): void;
    /**
     * Returns the number of times the cell has been visited
     */
    readonly VisitCount: number;
    /**
     * Returns the move number that the cell was last visited on, 0 if never visited.
     */
    readonly LastVisited: number;
    /**
     * Returns true if the cell has an exit in the given direction, otherwise... returns !true
     *
     * @param dir - Direction to check for an exit
     * @returns boolean
     */
    isDirOpen(dir: DIRS): boolean;
}
export default CellBase;
