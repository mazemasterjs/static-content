"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ObjectBase_1 = require("./ObjectBase");
/**
 * An individual, maze-running bot.
 * May be associated with team and coder via GUID
 * relationships to score, game, and team documents
 * in the mmjs database.
 */
class Bot extends ObjectBase_1.ObjectBase {
    constructor(data) {
        super();
        if (data !== undefined) {
            this.id = this.validateDataField('id', data.id, 'string');
            this.name = this.validateDataField('name', data.name, 'string');
            this.weight = this.validateDataField('weight', data.weight, 'number');
            this.coder = this.validateDataField('coder', data.coder, 'string');
        }
        else {
            this.id = this.generateId();
            this.name = '';
            this.weight = 100;
            this.coder = '';
        }
    }
    /**
     * @returns string - The UUID identifier for this bot
     */
    get Id() {
        return this.id;
    }
    /**
     * @returns string - The name of the bot.
     */
    get Name() {
        return this.name;
    }
    /**
     * Set the name of the bot
     *
     * @param name (string) - the name of the bot
     */
    set Name(name) {
        this.name = name;
    }
    /**
     * @returns number - The weighting used for this bot's recommendations during team games
     */
    get Weight() {
        return this.weight;
    }
    /**
     * Set the bot's weighting for team games
     * @param weight (number) - the bot's weighting for team games
     */
    set Weight(weight) {
        this.weight = weight;
    }
    /**
     * @returns string - The name of the coder who owns this bot.
     */
    get Coder() {
        return this.coder;
    }
    /**
     * Set the name of the bot's coder
     * @param name - (string) The name of the bot's coder
     */
    set Coder(name) {
        this.coder = name;
    }
}
exports.Bot = Bot;
exports.default = Bot;
//# sourceMappingURL=Bot.js.map