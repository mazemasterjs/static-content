import Cell from './Cell';
import { ObjectBase } from './ObjectBase';
import { MazeLoc } from './MazeLoc';
import IMazeStub from './Interfaces/IMazeStub';
import { DIRS } from './Enums';
export declare class MazeBase extends ObjectBase {
    protected id: string;
    protected height: number;
    protected width: number;
    protected challenge: number;
    protected name: string;
    protected seed: string;
    protected cells: Cell[][];
    protected textRender: string;
    protected startCell: MazeLoc;
    protected finishCell: MazeLoc;
    protected shortestPathLength: number;
    protected trapCount: number;
    protected note: string;
    protected lastUpdated: number;
    /**
     * Instantiates or new or pre-loaded Maze object
     * @param data - JSON Object containing stubbed maze data
     */
    constructor(jsonData?: any);
    /**
     * Calculates and returns neighboring cell in the given direction
     * TODO: Consider checking neighbor validity here?
     *
     * @param cell
     * @param dir
     */
    getNeighbor(cell: Cell, dir: DIRS): Cell;
    /**
     * Attempts to find and return the cell in the given position
     *
     * @param pos
     * @throws Out Of Bounds error if given position is outside of cells array's bounds.
     */
    getCell(pos: MazeLoc): Cell;
    /**
     * Returns a text rendering of the maze as a grid of 3x3
     * character blocks.
     */
    generateTextRender(forceRegen: boolean, playerPos?: MazeLoc): string;
    LastUpdated: number;
    readonly Height: number;
    readonly Width: number;
    readonly Name: string;
    readonly Seed: string;
    readonly ChallengeLevel: number;
    readonly Cells: Cell[][];
    readonly CellCount: number;
    readonly TextRender: string;
    readonly Id: string;
    readonly StartCell: MazeLoc;
    readonly FinishCell: MazeLoc;
    readonly ShortestPathLength: number;
    readonly TrapCount: number;
    Note: string;
    /**
     * Validates and loads the given JSON object into the current MazeBase instance
     *
     * @param jsonData
     */
    loadData(jsonData: any): void;
    /**
     * Returns only basic maze data - for use
     * with lists, scores, etc
     */
    getMazeStub(): IMazeStub;
    /**
     * Rebuild the maze array from the given data to instantiate
     * each individual Cell object
     * @param cells
     */
    private buildCellsArray;
    /**
     * Return appropriate trap icon for text-renderer given
     * a cell.Traps bitwise value.
     *
     * @param cellTraps
     */
    private getCellTrapIcon;
}
export default MazeBase;
