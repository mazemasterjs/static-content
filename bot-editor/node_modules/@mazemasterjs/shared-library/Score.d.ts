import { GAME_MODES, GAME_RESULTS, TROPHY_IDS } from './Enums';
import { ObjectBase } from './ObjectBase';
import ITrophyStub from './Interfaces/ITrophyStub';
export declare class Score extends ObjectBase {
    /**
     * Attempts to load the given JSON Object into a new score object
     *
     * @param jsonData
     */
    static fromJson(jsonData: any): Score;
    protected id: string;
    protected gameId: string;
    protected mazeId: string;
    protected teamId: string;
    protected botId: string;
    protected gameMode: GAME_MODES;
    protected gameRound: number;
    protected gameResult: GAME_RESULTS;
    protected moveCount: number;
    protected backtrackCount: number;
    protected trophyStubs: Array<ITrophyStub>;
    protected bonusPoints: number;
    protected lastUpdated: number;
    constructor(gameId: string, mazeId: string, teamId: string, gameMode: GAME_MODES, botId?: string);
    /**
     * Increments the players move count by one.
     */
    addMove(): void;
    /**
     * Increments the player move count by the given number.
     * In some situations, the game server may need to increment by more than one.
     * @param number - the number of moves to add to player's move count
     *
     */
    addMoves(moves: number): void;
    /**
     * Increment the Backtrack Counter by 1
     */
    addBacktrack(): void;
    /**
     * Calculate and return the total game score.  All games start with 1000
     * points.  Then:
     *
     * Add bonusPoints (awarded during gameplay, usually via trophies)
     * Subtract (moveCount - backtrackCount)
     * Subtract (backtrackCount * 2)
     *
     * gameResults generally reflected via trophies, but special cases:
     * - ABANDONED: Score reset to zero
     * - OUT_OF_TIME: Score reset to zero
     *
     *
     * @returns number - the total score for the game
     */
    getTotalScore(): number;
    /**
     * Grants a trophy by increasing the count or adding a stub to the given array
     *
     * @param trophyEnum number - An enumeration value from Enums.TROPHY_IDS
     * @param trophyStubs Array<ITrophyStub> - Array of stubs to to add the trophy to.
     * @returns number - current count of the trophy added
     */
    addTrophy(trophyEnum: TROPHY_IDS): number;
    /**
     * Returns the count (number of times awarded) of the
     * trophy with the given TrophyId from Enums.TROPHY_IDS
     *
     * @param trophyId (Enums.TROPHY_IDS) - The Id of the trophy to get a count of
     */
    getTrophyCount(trophyId: TROPHY_IDS): number;
    /**
     * Return the trophy stubs associated with this score
     */
    readonly Trophies: Array<ITrophyStub>;
    /**
     * Sets the total number of bonus points to the given value.
     * @param number - bonus point value to apply
     */
    addBonusPoints(value: number): void;
    /**
     * Return the current value of gameMode
     */
    /**
    * Set gameMode value to the given value
    */
    GameMode: GAME_MODES;
    /**
     * Sets BotId to associate with this score
     */
    /**
    * @returns BotId for the bot associated with this score
    */
    BotId: string;
    /**
     * BacktrackCount represents the number of times a bot has
     * re-entered a maze cell.  Used for trophies and bonus scoring
     */
    readonly BacktrackCount: number;
    /**
     * @return string - the MazeId associated with this score
     */
    /**
    * Set the MazeId for this score
    * @param mazeId, string - a generated MazeId in the format of "height:width:challenge:name"
    *
    */
    MazeId: string;
    /**
     * @returns string - The TeamId associated with this score
     */
    /**
    * Sets the TeamId associated with this store to the given string
    * @param string - The GUID of a specific team
    */
    TeamId: string;
    /**
     * @returns string - a GameId GUID generated by the game server
     */
    /**
    * Set the GameId GUID (generally done by the game server)
    * @param string - a GUID GameId
    */
    GameId: string;
    /**
     * @param number - returns the game round (Note: Not currently used)
     */
    /**
    * Set's the GameRound to the given value
    * @param number - the Game Round (Note: Not currently used)
    */
    GameRound: number;
    /**
     * @return number - the total number of moves made by the player.
     */
    readonly MoveCount: number;
    /**
     * @returns - the current number of bonus points accumulated
     */
    readonly BonusPoints: number;
    /**
     * @returns an enumerated value from Enums.GAME_RESULTS representing the game result
     */
    /**
    * Set the GameResult to one of the values in Enums.GAME_RESULTS
    */
    GameResult: GAME_RESULTS;
    LastUpdated: number;
    readonly Id: string;
}
export default Score;
