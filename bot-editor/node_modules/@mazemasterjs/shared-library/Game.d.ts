import { GAME_MODES, GAME_STATES } from './Enums';
import { Score } from './Score';
import { IGameStub } from './Interfaces/IGameStub';
import { Player } from './Player';
import { IAction } from './Interfaces/IAction';
import MazeBase from './MazeBase';
import { ObjectBase } from './ObjectBase';
export declare class Game extends ObjectBase {
    private id;
    private state;
    private maze;
    private mode;
    private score;
    private player;
    private actions;
    private round;
    private teamId;
    private botId;
    private lastAccessed;
    constructor(maze: MazeBase, teamId: string, botId?: string);
    readonly Round: number;
    readonly LastAccessTime: number;
    readonly Id: string;
    readonly BotId: string;
    addAction(action: IAction): void;
    getLastAction(): IAction;
    getAction(moveNumber: number): IAction;
    readonly Actions: Array<IAction>;
    /**
     * Returns a list of actions starting with the given move number
     *
     * @param moveNumber - First move in the returned list of actions
     *
     */
    getActionsSince(moveNumber: number): Array<IAction>;
    /**
     * Returns an array of game actions within the given range
     *
     * @param start starting action
     * @param count total number of actions to return
     */
    getActionsRange(start: number, count: number): Array<IAction>;
    getStub(gameServerExtUrl: string): IGameStub;
    forceSetId(forcedId: string): void;
    readonly Mode: GAME_MODES;
    State: GAME_STATES;
    readonly Maze: MazeBase;
    readonly TeamId: string;
    readonly Score: Score;
    Player: Player;
}
