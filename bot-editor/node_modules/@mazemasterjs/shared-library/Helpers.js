"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Enums_1 = require("./Enums");
const logger_1 = require("@mazemasterjs/logger");
/**
 * Helper Functions for Maze Master JS
 */
// static class instances
const log = logger_1.Logger.getInstance();
// const DEFAULT_MAZE_STUB_FILE = path.resolve('data/maze-list.json');
/**
 * Returns string array of the selected (bitwise) values within
 * the given enumeration.
 *
 * @param bitwiseEnum - Only works with bitwise enumerations!
 * @param selectedBits - Number representing the selected bits
 */
function listSelectedBitNames(bitwiseEnum, selectedBits) {
    let ret = '';
    log.trace(__filename, `listSelectedBitNames(${bitwiseEnum}, ${selectedBits}`, 'Listing selected bit names from enumeration.');
    for (const dir in bitwiseEnum) {
        // having a hard time with isNumber(0) for some reason - isNaN(parseInt()) seems more reliable
        if (!isNaN(parseInt(dir, 10))) {
            const bitVal = parseInt(dir, 10);
            if (!!(bitVal & selectedBits)) {
                const stringVal = bitwiseEnum[bitVal];
                ret += ret.length === 0 ? stringVal : ', ' + stringVal;
            }
        }
    }
    if (ret.length === 0) {
        ret = 'NONE';
    }
    log.trace(__filename, `listSelectedBitNames(${bitwiseEnum}, ${selectedBits})`, 'Returning selected bit names: ' + ret);
    return ret;
}
exports.listSelectedBitNames = listSelectedBitNames;
/**
 * Returns string array of the selected (bitwise) values within
 * the given enumeration.
 *
 * @param bitwiseEnum - Only works with bitwise enumerations!
 * @param selectedBits - Number representing the selected bits
 */
function getSelectedBitNames(bitwiseEnum, selectedBits) {
    log.trace(__filename, `getSelectedBitNames(${bitwiseEnum}, ${selectedBits})`, 'Creating array of selected bit names for enumeration.');
    const ret = new Array();
    for (const dir in bitwiseEnum) {
        // having a hard time with isNumber(0) for some reason - isNaN(parseInt()) seems more reliable
        if (!isNaN(parseInt(dir, 10))) {
            const bitVal = parseInt(dir, 10);
            if (!!(bitVal & selectedBits)) {
                const stringVal = bitwiseEnum[bitVal];
                ret.push(stringVal);
            }
        }
    }
    if (ret.length === 0) {
        ret.push('NONE');
    }
    log.trace(__filename, `getSelectedBitNames(${bitwiseEnum}, ${selectedBits})`, 'Returning array of selected bit names for enumeration.');
    return ret;
}
exports.getSelectedBitNames = getSelectedBitNames;
/**
 * Returns the opposing direction for a given direction
 * @param dir - The Enums.DIRS direction to reverse
 */
function reverseDir(dir) {
    log.trace(__filename, `getSelectedBitNames(${dir})`, 'Returning reverse of direction ' + Enums_1.DIRS[dir]);
    switch (dir) {
        case Enums_1.DIRS.NORTH:
            return Enums_1.DIRS.SOUTH;
        case Enums_1.DIRS.SOUTH:
            return Enums_1.DIRS.NORTH;
        case Enums_1.DIRS.EAST:
            return Enums_1.DIRS.WEST;
        case Enums_1.DIRS.WEST:
            return Enums_1.DIRS.EAST;
        default:
            return 0;
    }
}
exports.reverseDir = reverseDir;
/**
 * Gets and returns the value of the requested environment variable
 * as the given type.
 *
 * @param varName - the name of the environment variable to get
 * @param typeName - tye name of the type to return the value as (string | number)
 */
function getEnvVar(varName, typeName) {
    const val = process.env[varName];
    // first see if the variable was found - if not, let's blow this sucker up
    if (val === undefined) {
        throw doError(`getVar(${varName}, ${typeName})`, 'Configuration Error', `Environment variable not set: ${varName}`);
    }
    // we have a value - log the good news
    log.trace(__filename, `getVar(${varName}, ${typeName})`, `${varName}=${val}`);
    // convert to expect type and return
    switch (typeName) {
        case 'string': {
            return val;
        }
        case 'number': {
            return parseInt(val, 10); // this could blow up, but that's ok since we'd want it to
        }
        default: {
            // we only want numbers or strings...
            doError(`getVar(${varName}, ${typeName})`, 'Argument Error', `Invalid variable type name: ${typeName}. Try 'string' or 'number' instead.`);
        }
    }
}
exports.getEnvVar = getEnvVar;
/**
 * Wrapping log.error to clean things up a little
 *
 * @param method
 * @param title
 * @param message
 */
function doError(method, title, message) {
    const err = new Error(message);
    log.error(__filename, method, title + ' ->', err);
    return err;
}
exports.doError = doError;
//# sourceMappingURL=Helpers.js.map