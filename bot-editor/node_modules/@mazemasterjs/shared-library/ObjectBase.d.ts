/**
 * Base class providing functions/features common to most of the MMJS
 * game objects.
 *
 */
export declare abstract class ObjectBase {
    /**
     * Validate that the given value is of the expected type.
     *
     * @param field string - the field name being validated
     * @param val any - the field value to check for proper typing
     * @param type string - the type name to check for for
     *
     * @returns any - Returns the given val if validation succeeds
     * @throws Validation Error
     */
    protected validateDataField(field: string, val: any, type: string, noTrim?: boolean): any;
    /**
     * Validate that enumeration values passed from json data match
     * values stored in the actual enumeration
     *
     * @param fieldName - name of the class field being validated
     * @param enumName - name of the enumeration to validate against
     * @param enumObj - the enumeration to validate against
     * @param enumVal - the value to validate
     *
     * @returns number - the validated value of enumVal
     * @throws Validation Error
     */
    protected validateEnumField(fieldName: string, enumName: string, enumObj: object, enumVal: number): number;
    /**
     * Simple trace wrapper to reduce the number of useless module calls
     * @param file
     * @param method
     * @param msg
     */
    protected logTrace(file: string, method: string, msg: string): void;
    /**
     * Simple debug wrapper to reduce the number of useless module calls
     * @param file
     * @param method
     * @param msg
     */
    protected logDebug(file: string, method: string, msg: string): void;
    /**
     * Hashed UUIDs should be shorter and easier to work with while hopefully still
     * unique enough for our needs
     */
    protected generateId(): string;
}
