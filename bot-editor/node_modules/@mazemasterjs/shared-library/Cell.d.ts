import { CELL_TAGS, CELL_TRAPS, DIRS } from './Enums';
import CellBase from './CellBase';
/**
 * Represents a single cell in a maze
 */
export declare class Cell extends CellBase {
    constructor(jsonData?: any);
    /**
     * Adds the given trap to the cell (unless it's already been set)
     *
     * @param trap - A value from Enums.CELL_TRAPS
     */
    addTrap(trap: CELL_TRAPS): void;
    /**
     * Removes the given trap to the cell (unless it's not found)
     *
     * @param trap - A value from Enums.CELL_TRAPS
     */
    removeTrap(trap: CELL_TRAPS): void;
    /**
     * Remove all traps
     */
    clearTraps(): void;
    /**
     * Adds an Enums.Tag to this cell if it doesn't already exist
     * @param tag
     */
    addTag(tag: CELL_TAGS): void;
    /**
     * Removes a tag from this cell, if it exists
     * @param tag
     */
    removeTag(tag: CELL_TAGS): void;
    /**
     * Removes all cell tags.
     */
    clearTags(): void;
    /**
     * Return a count of exits available in this cell
     */
    getExitCount(): number;
    /**
     * Adds exit to a cell if exit doesn't already exist.
     * Also adds neighboring exit to valid, adjoining cell.
     *
     * @param dir
     * @param cells
     * @returns boolean
     */
    addExit(dir: DIRS, cells: Array<Array<Cell>>): boolean;
    /**
     * Removes exit to a cell if it exists.
     * Also removes neighboring exit from valid, adjoining cell.
     *
     * @param dir
     * @param cells
     * @returns boolean
     */
    removeExit(dir: DIRS, cells: Array<Array<Cell>>): boolean;
    /**
     * Adds or Removes cell exits, depending on SET_EXIT_MODES value.
     * Also adds or removes opposite exit from valid, adjoining cell.
     * Only trace logging - this is called frequently by recursive generation
     * routines.
     *
     * @param dir
     * @param cells
     * @returns boolean
     */
    private setExit;
}
export default Cell;
